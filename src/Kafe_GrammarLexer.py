# Generated from Kafe_Grammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
        1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,5,48,286,8,48,10,48,12,48,289,9,48,1,48,1,48,1,49,1,49,
        1,49,1,49,5,49,297,8,49,10,49,12,49,300,9,49,1,49,1,49,1,49,1,49,
        1,49,1,50,4,50,308,8,50,11,50,12,50,309,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,321,8,51,1,52,4,52,324,8,52,11,52,12,52,
        325,1,52,1,52,4,52,330,8,52,11,52,12,52,331,1,53,1,53,5,53,336,8,
        53,10,53,12,53,339,9,53,1,53,1,53,1,53,5,53,344,8,53,10,53,12,53,
        347,9,53,1,53,3,53,350,8,53,1,54,1,54,5,54,354,8,54,10,54,12,54,
        357,9,54,1,55,4,55,360,8,55,11,55,12,55,361,1,55,1,55,3,298,337,
        345,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,1,0,5,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,375,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,
        0,0,0,1,113,1,0,0,0,3,119,1,0,0,0,5,123,1,0,0,0,7,126,1,0,0,0,9,
        130,1,0,0,0,11,136,1,0,0,0,13,140,1,0,0,0,15,145,1,0,0,0,17,150,
        1,0,0,0,19,155,1,0,0,0,21,160,1,0,0,0,23,167,1,0,0,0,25,170,1,0,
        0,0,27,175,1,0,0,0,29,181,1,0,0,0,31,186,1,0,0,0,33,193,1,0,0,0,
        35,195,1,0,0,0,37,197,1,0,0,0,39,199,1,0,0,0,41,201,1,0,0,0,43,203,
        1,0,0,0,45,205,1,0,0,0,47,208,1,0,0,0,49,211,1,0,0,0,51,214,1,0,
        0,0,53,217,1,0,0,0,55,219,1,0,0,0,57,221,1,0,0,0,59,224,1,0,0,0,
        61,227,1,0,0,0,63,230,1,0,0,0,65,232,1,0,0,0,67,234,1,0,0,0,69,236,
        1,0,0,0,71,238,1,0,0,0,73,240,1,0,0,0,75,242,1,0,0,0,77,244,1,0,
        0,0,79,246,1,0,0,0,81,248,1,0,0,0,83,250,1,0,0,0,85,252,1,0,0,0,
        87,257,1,0,0,0,89,261,1,0,0,0,91,267,1,0,0,0,93,272,1,0,0,0,95,277,
        1,0,0,0,97,281,1,0,0,0,99,292,1,0,0,0,101,307,1,0,0,0,103,320,1,
        0,0,0,105,323,1,0,0,0,107,349,1,0,0,0,109,351,1,0,0,0,111,359,1,
        0,0,0,113,114,5,119,0,0,114,115,5,104,0,0,115,116,5,105,0,0,116,
        117,5,108,0,0,117,118,5,101,0,0,118,2,1,0,0,0,119,120,5,102,0,0,
        120,121,5,111,0,0,121,122,5,114,0,0,122,4,1,0,0,0,123,124,5,105,
        0,0,124,125,5,110,0,0,125,6,1,0,0,0,126,127,5,105,0,0,127,128,5,
        110,0,0,128,129,5,116,0,0,129,8,1,0,0,0,130,131,5,102,0,0,131,132,
        5,108,0,0,132,133,5,111,0,0,133,134,5,97,0,0,134,135,5,116,0,0,135,
        10,1,0,0,0,136,137,5,115,0,0,137,138,5,116,0,0,138,139,5,114,0,0,
        139,12,1,0,0,0,140,141,5,98,0,0,141,142,5,111,0,0,142,143,5,111,
        0,0,143,144,5,108,0,0,144,14,1,0,0,0,145,146,5,100,0,0,146,147,5,
        114,0,0,147,148,5,105,0,0,148,149,5,112,0,0,149,16,1,0,0,0,150,151,
        5,112,0,0,151,152,5,111,0,0,152,153,5,117,0,0,153,154,5,114,0,0,
        154,18,1,0,0,0,155,156,5,115,0,0,156,157,5,104,0,0,157,158,5,111,
        0,0,158,159,5,119,0,0,159,20,1,0,0,0,160,161,5,114,0,0,161,162,5,
        101,0,0,162,163,5,116,0,0,163,164,5,117,0,0,164,165,5,114,0,0,165,
        166,5,110,0,0,166,22,1,0,0,0,167,168,5,105,0,0,168,169,5,102,0,0,
        169,24,1,0,0,0,170,171,5,101,0,0,171,172,5,108,0,0,172,173,5,115,
        0,0,173,174,5,101,0,0,174,26,1,0,0,0,175,176,5,109,0,0,176,177,5,
        97,0,0,177,178,5,116,0,0,178,179,5,99,0,0,179,180,5,104,0,0,180,
        28,1,0,0,0,181,182,5,70,0,0,182,183,5,85,0,0,183,184,5,78,0,0,184,
        185,5,67,0,0,185,30,1,0,0,0,186,187,5,105,0,0,187,188,5,109,0,0,
        188,189,5,112,0,0,189,190,5,111,0,0,190,191,5,114,0,0,191,192,5,
        116,0,0,192,32,1,0,0,0,193,194,5,43,0,0,194,34,1,0,0,0,195,196,5,
        45,0,0,196,36,1,0,0,0,197,198,5,42,0,0,198,38,1,0,0,0,199,200,5,
        47,0,0,200,40,1,0,0,0,201,202,5,37,0,0,202,42,1,0,0,0,203,204,5,
        94,0,0,204,44,1,0,0,0,205,206,5,38,0,0,206,207,5,38,0,0,207,46,1,
        0,0,0,208,209,5,124,0,0,209,210,5,124,0,0,210,48,1,0,0,0,211,212,
        5,61,0,0,212,213,5,61,0,0,213,50,1,0,0,0,214,215,5,33,0,0,215,216,
        5,61,0,0,216,52,1,0,0,0,217,218,5,60,0,0,218,54,1,0,0,0,219,220,
        5,62,0,0,220,56,1,0,0,0,221,222,5,60,0,0,222,223,5,61,0,0,223,58,
        1,0,0,0,224,225,5,62,0,0,225,226,5,61,0,0,226,60,1,0,0,0,227,228,
        5,61,0,0,228,229,5,62,0,0,229,62,1,0,0,0,230,231,5,61,0,0,231,64,
        1,0,0,0,232,233,5,33,0,0,233,66,1,0,0,0,234,235,5,40,0,0,235,68,
        1,0,0,0,236,237,5,41,0,0,237,70,1,0,0,0,238,239,5,91,0,0,239,72,
        1,0,0,0,240,241,5,93,0,0,241,74,1,0,0,0,242,243,5,58,0,0,243,76,
        1,0,0,0,244,245,5,124,0,0,245,78,1,0,0,0,246,247,5,59,0,0,247,80,
        1,0,0,0,248,249,5,44,0,0,249,82,1,0,0,0,250,251,5,95,0,0,251,84,
        1,0,0,0,252,253,5,76,0,0,253,254,5,105,0,0,254,255,5,115,0,0,255,
        256,5,116,0,0,256,86,1,0,0,0,257,258,5,73,0,0,258,259,5,78,0,0,259,
        260,5,84,0,0,260,88,1,0,0,0,261,262,5,70,0,0,262,263,5,76,0,0,263,
        264,5,79,0,0,264,265,5,65,0,0,265,266,5,84,0,0,266,90,1,0,0,0,267,
        268,5,66,0,0,268,269,5,79,0,0,269,270,5,79,0,0,270,271,5,76,0,0,
        271,92,1,0,0,0,272,273,5,86,0,0,273,274,5,79,0,0,274,275,5,73,0,
        0,275,276,5,68,0,0,276,94,1,0,0,0,277,278,5,83,0,0,278,279,5,84,
        0,0,279,280,5,82,0,0,280,96,1,0,0,0,281,282,5,45,0,0,282,283,5,45,
        0,0,283,287,1,0,0,0,284,286,8,0,0,0,285,284,1,0,0,0,286,289,1,0,
        0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,
        0,0,290,291,6,48,0,0,291,98,1,0,0,0,292,293,5,45,0,0,293,294,5,62,
        0,0,294,298,1,0,0,0,295,297,9,0,0,0,296,295,1,0,0,0,297,300,1,0,
        0,0,298,299,1,0,0,0,298,296,1,0,0,0,299,301,1,0,0,0,300,298,1,0,
        0,0,301,302,5,60,0,0,302,303,5,45,0,0,303,304,1,0,0,0,304,305,6,
        49,0,0,305,100,1,0,0,0,306,308,7,1,0,0,307,306,1,0,0,0,308,309,1,
        0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,102,1,0,0,0,311,312,5,
        84,0,0,312,313,5,114,0,0,313,314,5,117,0,0,314,321,5,101,0,0,315,
        316,5,70,0,0,316,317,5,97,0,0,317,318,5,108,0,0,318,319,5,115,0,
        0,319,321,5,101,0,0,320,311,1,0,0,0,320,315,1,0,0,0,321,104,1,0,
        0,0,322,324,7,1,0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,323,1,0,
        0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,329,5,46,0,0,328,330,7,1,
        0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,
        0,0,332,106,1,0,0,0,333,337,5,34,0,0,334,336,9,0,0,0,335,334,1,0,
        0,0,336,339,1,0,0,0,337,338,1,0,0,0,337,335,1,0,0,0,338,340,1,0,
        0,0,339,337,1,0,0,0,340,350,5,34,0,0,341,345,5,39,0,0,342,344,9,
        0,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,346,1,0,0,0,345,343,1,
        0,0,0,346,348,1,0,0,0,347,345,1,0,0,0,348,350,5,39,0,0,349,333,1,
        0,0,0,349,341,1,0,0,0,350,108,1,0,0,0,351,355,7,2,0,0,352,354,7,
        3,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,
        0,0,0,356,110,1,0,0,0,357,355,1,0,0,0,358,360,7,4,0,0,359,358,1,
        0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,363,1,
        0,0,0,363,364,6,55,0,0,364,112,1,0,0,0,12,0,287,298,309,320,325,
        331,337,345,349,355,361,1,6,0,0
    ]

class Kafe_GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    INT_CAST = 4
    FLOAT_CAST = 5
    STR_CAST = 6
    BOOL_CAST = 7
    DRIP = 8
    POUR = 9
    SHOW = 10
    RETURN = 11
    IF = 12
    ELSE = 13
    MATCH = 14
    FUNC = 15
    IMPORT = 16
    ADD = 17
    SUB = 18
    MUL = 19
    DIV = 20
    MOD = 21
    POW = 22
    AND = 23
    OR = 24
    EQ = 25
    NEQ = 26
    LT = 27
    GT = 28
    LE = 29
    GE = 30
    ARROW = 31
    ASSIGN = 32
    NOT = 33
    LPAREN = 34
    RPAREN = 35
    LBRACK = 36
    RBRACK = 37
    COLON = 38
    PIPE = 39
    SEMI = 40
    COMMA = 41
    UNDERSCORE = 42
    LIST = 43
    INT_TYPE = 44
    FLOAT_TYPE = 45
    BOOL_TYPE = 46
    VOID_TYPE = 47
    STRING_TYPE = 48
    LINE_COMMENT = 49
    BLOCK_COMMENT = 50
    INT = 51
    BOOL = 52
    FLOAT = 53
    STRING = 54
    ID = 55
    WS = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'while'", "'for'", "'in'", "'int'", "'float'", "'str'", "'bool'", 
            "'drip'", "'pour'", "'show'", "'return'", "'if'", "'else'", 
            "'match'", "'FUNC'", "'import'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'^'", "'&&'", "'||'", "'=='", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'=>'", "'='", "'!'", "'('", "')'", "'['", "']'", 
            "':'", "'|'", "';'", "','", "'_'", "'List'", "'INT'", "'FLOAT'", 
            "'BOOL'", "'VOID'", "'STR'" ]

    symbolicNames = [ "<INVALID>",
            "INT_CAST", "FLOAT_CAST", "STR_CAST", "BOOL_CAST", "DRIP", "POUR", 
            "SHOW", "RETURN", "IF", "ELSE", "MATCH", "FUNC", "IMPORT", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "POW", "AND", "OR", "EQ", "NEQ", 
            "LT", "GT", "LE", "GE", "ARROW", "ASSIGN", "NOT", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "COLON", "PIPE", "SEMI", "COMMA", 
            "UNDERSCORE", "LIST", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
            "VOID_TYPE", "STRING_TYPE", "LINE_COMMENT", "BLOCK_COMMENT", 
            "INT", "BOOL", "FLOAT", "STRING", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "INT_CAST", "FLOAT_CAST", "STR_CAST", 
                  "BOOL_CAST", "DRIP", "POUR", "SHOW", "RETURN", "IF", "ELSE", 
                  "MATCH", "FUNC", "IMPORT", "ADD", "SUB", "MUL", "DIV", 
                  "MOD", "POW", "AND", "OR", "EQ", "NEQ", "LT", "GT", "LE", 
                  "GE", "ARROW", "ASSIGN", "NOT", "LPAREN", "RPAREN", "LBRACK", 
                  "RBRACK", "COLON", "PIPE", "SEMI", "COMMA", "UNDERSCORE", 
                  "LIST", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "VOID_TYPE", 
                  "STRING_TYPE", "LINE_COMMENT", "BLOCK_COMMENT", "INT", 
                  "BOOL", "FLOAT", "STRING", "ID", "WS" ]

    grammarFileName = "Kafe_Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


