# Generated from Kafe_Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,346,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,
        21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,
        26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,
        41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
        43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,267,8,45,10,45,12,
        45,270,9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,278,8,46,10,46,12,
        46,281,9,46,1,46,1,46,1,46,1,46,1,46,1,47,4,47,289,8,47,11,47,12,
        47,290,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,302,8,48,
        1,49,4,49,305,8,49,11,49,12,49,306,1,49,1,49,4,49,311,8,49,11,49,
        12,49,312,1,50,1,50,5,50,317,8,50,10,50,12,50,320,9,50,1,50,1,50,
        1,50,5,50,325,8,50,10,50,12,50,328,9,50,1,50,3,50,331,8,50,1,51,
        1,51,5,51,335,8,51,10,51,12,51,338,9,51,1,52,4,52,341,8,52,11,52,
        12,52,342,1,52,1,52,3,279,318,326,0,53,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,1,0,5,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,356,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,111,1,0,0,0,5,
        117,1,0,0,0,7,121,1,0,0,0,9,126,1,0,0,0,11,131,1,0,0,0,13,136,1,
        0,0,0,15,141,1,0,0,0,17,148,1,0,0,0,19,151,1,0,0,0,21,156,1,0,0,
        0,23,162,1,0,0,0,25,167,1,0,0,0,27,174,1,0,0,0,29,176,1,0,0,0,31,
        178,1,0,0,0,33,180,1,0,0,0,35,182,1,0,0,0,37,184,1,0,0,0,39,186,
        1,0,0,0,41,189,1,0,0,0,43,192,1,0,0,0,45,195,1,0,0,0,47,198,1,0,
        0,0,49,200,1,0,0,0,51,202,1,0,0,0,53,205,1,0,0,0,55,208,1,0,0,0,
        57,211,1,0,0,0,59,213,1,0,0,0,61,215,1,0,0,0,63,217,1,0,0,0,65,219,
        1,0,0,0,67,221,1,0,0,0,69,223,1,0,0,0,71,225,1,0,0,0,73,227,1,0,
        0,0,75,229,1,0,0,0,77,231,1,0,0,0,79,233,1,0,0,0,81,238,1,0,0,0,
        83,242,1,0,0,0,85,248,1,0,0,0,87,253,1,0,0,0,89,258,1,0,0,0,91,262,
        1,0,0,0,93,273,1,0,0,0,95,288,1,0,0,0,97,301,1,0,0,0,99,304,1,0,
        0,0,101,330,1,0,0,0,103,332,1,0,0,0,105,340,1,0,0,0,107,108,5,105,
        0,0,108,109,5,110,0,0,109,110,5,116,0,0,110,2,1,0,0,0,111,112,5,
        102,0,0,112,113,5,108,0,0,113,114,5,111,0,0,114,115,5,97,0,0,115,
        116,5,116,0,0,116,4,1,0,0,0,117,118,5,115,0,0,118,119,5,116,0,0,
        119,120,5,114,0,0,120,6,1,0,0,0,121,122,5,98,0,0,122,123,5,111,0,
        0,123,124,5,111,0,0,124,125,5,108,0,0,125,8,1,0,0,0,126,127,5,100,
        0,0,127,128,5,114,0,0,128,129,5,105,0,0,129,130,5,112,0,0,130,10,
        1,0,0,0,131,132,5,112,0,0,132,133,5,111,0,0,133,134,5,117,0,0,134,
        135,5,114,0,0,135,12,1,0,0,0,136,137,5,115,0,0,137,138,5,104,0,0,
        138,139,5,111,0,0,139,140,5,119,0,0,140,14,1,0,0,0,141,142,5,114,
        0,0,142,143,5,101,0,0,143,144,5,116,0,0,144,145,5,117,0,0,145,146,
        5,114,0,0,146,147,5,110,0,0,147,16,1,0,0,0,148,149,5,105,0,0,149,
        150,5,102,0,0,150,18,1,0,0,0,151,152,5,101,0,0,152,153,5,108,0,0,
        153,154,5,115,0,0,154,155,5,101,0,0,155,20,1,0,0,0,156,157,5,109,
        0,0,157,158,5,97,0,0,158,159,5,116,0,0,159,160,5,99,0,0,160,161,
        5,104,0,0,161,22,1,0,0,0,162,163,5,70,0,0,163,164,5,85,0,0,164,165,
        5,78,0,0,165,166,5,67,0,0,166,24,1,0,0,0,167,168,5,105,0,0,168,169,
        5,109,0,0,169,170,5,112,0,0,170,171,5,111,0,0,171,172,5,114,0,0,
        172,173,5,116,0,0,173,26,1,0,0,0,174,175,5,43,0,0,175,28,1,0,0,0,
        176,177,5,45,0,0,177,30,1,0,0,0,178,179,5,42,0,0,179,32,1,0,0,0,
        180,181,5,47,0,0,181,34,1,0,0,0,182,183,5,37,0,0,183,36,1,0,0,0,
        184,185,5,94,0,0,185,38,1,0,0,0,186,187,5,38,0,0,187,188,5,38,0,
        0,188,40,1,0,0,0,189,190,5,124,0,0,190,191,5,124,0,0,191,42,1,0,
        0,0,192,193,5,61,0,0,193,194,5,61,0,0,194,44,1,0,0,0,195,196,5,33,
        0,0,196,197,5,61,0,0,197,46,1,0,0,0,198,199,5,60,0,0,199,48,1,0,
        0,0,200,201,5,62,0,0,201,50,1,0,0,0,202,203,5,60,0,0,203,204,5,61,
        0,0,204,52,1,0,0,0,205,206,5,62,0,0,206,207,5,61,0,0,207,54,1,0,
        0,0,208,209,5,61,0,0,209,210,5,62,0,0,210,56,1,0,0,0,211,212,5,61,
        0,0,212,58,1,0,0,0,213,214,5,33,0,0,214,60,1,0,0,0,215,216,5,40,
        0,0,216,62,1,0,0,0,217,218,5,41,0,0,218,64,1,0,0,0,219,220,5,91,
        0,0,220,66,1,0,0,0,221,222,5,93,0,0,222,68,1,0,0,0,223,224,5,58,
        0,0,224,70,1,0,0,0,225,226,5,124,0,0,226,72,1,0,0,0,227,228,5,59,
        0,0,228,74,1,0,0,0,229,230,5,44,0,0,230,76,1,0,0,0,231,232,5,95,
        0,0,232,78,1,0,0,0,233,234,5,76,0,0,234,235,5,105,0,0,235,236,5,
        115,0,0,236,237,5,116,0,0,237,80,1,0,0,0,238,239,5,73,0,0,239,240,
        5,78,0,0,240,241,5,84,0,0,241,82,1,0,0,0,242,243,5,70,0,0,243,244,
        5,76,0,0,244,245,5,79,0,0,245,246,5,65,0,0,246,247,5,84,0,0,247,
        84,1,0,0,0,248,249,5,66,0,0,249,250,5,79,0,0,250,251,5,79,0,0,251,
        252,5,76,0,0,252,86,1,0,0,0,253,254,5,86,0,0,254,255,5,79,0,0,255,
        256,5,73,0,0,256,257,5,68,0,0,257,88,1,0,0,0,258,259,5,83,0,0,259,
        260,5,84,0,0,260,261,5,82,0,0,261,90,1,0,0,0,262,263,5,45,0,0,263,
        264,5,45,0,0,264,268,1,0,0,0,265,267,8,0,0,0,266,265,1,0,0,0,267,
        270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,
        268,1,0,0,0,271,272,6,45,0,0,272,92,1,0,0,0,273,274,5,45,0,0,274,
        275,5,62,0,0,275,279,1,0,0,0,276,278,9,0,0,0,277,276,1,0,0,0,278,
        281,1,0,0,0,279,280,1,0,0,0,279,277,1,0,0,0,280,282,1,0,0,0,281,
        279,1,0,0,0,282,283,5,60,0,0,283,284,5,45,0,0,284,285,1,0,0,0,285,
        286,6,46,0,0,286,94,1,0,0,0,287,289,7,1,0,0,288,287,1,0,0,0,289,
        290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,96,1,0,0,0,292,293,
        5,84,0,0,293,294,5,114,0,0,294,295,5,117,0,0,295,302,5,101,0,0,296,
        297,5,70,0,0,297,298,5,97,0,0,298,299,5,108,0,0,299,300,5,115,0,
        0,300,302,5,101,0,0,301,292,1,0,0,0,301,296,1,0,0,0,302,98,1,0,0,
        0,303,305,7,1,0,0,304,303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,
        0,306,307,1,0,0,0,307,308,1,0,0,0,308,310,5,46,0,0,309,311,7,1,0,
        0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,
        0,313,100,1,0,0,0,314,318,5,34,0,0,315,317,9,0,0,0,316,315,1,0,0,
        0,317,320,1,0,0,0,318,319,1,0,0,0,318,316,1,0,0,0,319,321,1,0,0,
        0,320,318,1,0,0,0,321,331,5,34,0,0,322,326,5,39,0,0,323,325,9,0,
        0,0,324,323,1,0,0,0,325,328,1,0,0,0,326,327,1,0,0,0,326,324,1,0,
        0,0,327,329,1,0,0,0,328,326,1,0,0,0,329,331,5,39,0,0,330,314,1,0,
        0,0,330,322,1,0,0,0,331,102,1,0,0,0,332,336,7,2,0,0,333,335,7,3,
        0,0,334,333,1,0,0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,
        0,0,337,104,1,0,0,0,338,336,1,0,0,0,339,341,7,4,0,0,340,339,1,0,
        0,0,341,342,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,344,1,0,
        0,0,344,345,6,52,0,0,345,106,1,0,0,0,12,0,268,279,290,301,306,312,
        318,326,330,336,342,1,6,0,0
    ]

class Kafe_Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_CAST = 1
    FLOAT_CAST = 2
    STR_CAST = 3
    BOOL_CAST = 4
    DRIP = 5
    POUR = 6
    SHOW = 7
    RETURN = 8
    IF = 9
    ELSE = 10
    MATCH = 11
    FUNC = 12
    IMPORT = 13
    ADD = 14
    SUB = 15
    MUL = 16
    DIV = 17
    MOD = 18
    POW = 19
    AND = 20
    OR = 21
    EQ = 22
    NEQ = 23
    LT = 24
    GT = 25
    LE = 26
    GE = 27
    ARROW = 28
    ASSIGN = 29
    NOT = 30
    LPAREN = 31
    RPAREN = 32
    LBRACK = 33
    RBRACK = 34
    COLON = 35
    PIPE = 36
    SEMI = 37
    COMMA = 38
    UNDERSCORE = 39
    LIST = 40
    INT_TYPE = 41
    FLOAT_TYPE = 42
    BOOL_TYPE = 43
    VOID_TYPE = 44
    STRING_TYPE = 45
    LINE_COMMENT = 46
    BLOCK_COMMENT = 47
    INT = 48
    BOOL = 49
    FLOAT = 50
    STRING = 51
    ID = 52
    WS = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'float'", "'str'", "'bool'", "'drip'", "'pour'", "'show'", 
            "'return'", "'if'", "'else'", "'match'", "'FUNC'", "'import'", 
            "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&&'", "'||'", "'=='", 
            "'!='", "'<'", "'>'", "'<='", "'>='", "'=>'", "'='", "'!'", 
            "'('", "')'", "'['", "']'", "':'", "'|'", "';'", "','", "'_'", 
            "'List'", "'INT'", "'FLOAT'", "'BOOL'", "'VOID'", "'STR'" ]

    symbolicNames = [ "<INVALID>",
            "INT_CAST", "FLOAT_CAST", "STR_CAST", "BOOL_CAST", "DRIP", "POUR", 
            "SHOW", "RETURN", "IF", "ELSE", "MATCH", "FUNC", "IMPORT", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "POW", "AND", "OR", "EQ", "NEQ", 
            "LT", "GT", "LE", "GE", "ARROW", "ASSIGN", "NOT", "LPAREN", 
            "RPAREN", "LBRACK", "RBRACK", "COLON", "PIPE", "SEMI", "COMMA", 
            "UNDERSCORE", "LIST", "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
            "VOID_TYPE", "STRING_TYPE", "LINE_COMMENT", "BLOCK_COMMENT", 
            "INT", "BOOL", "FLOAT", "STRING", "ID", "WS" ]

    ruleNames = [ "INT_CAST", "FLOAT_CAST", "STR_CAST", "BOOL_CAST", "DRIP", 
                  "POUR", "SHOW", "RETURN", "IF", "ELSE", "MATCH", "FUNC", 
                  "IMPORT", "ADD", "SUB", "MUL", "DIV", "MOD", "POW", "AND", 
                  "OR", "EQ", "NEQ", "LT", "GT", "LE", "GE", "ARROW", "ASSIGN", 
                  "NOT", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "COLON", 
                  "PIPE", "SEMI", "COMMA", "UNDERSCORE", "LIST", "INT_TYPE", 
                  "FLOAT_TYPE", "BOOL_TYPE", "VOID_TYPE", "STRING_TYPE", 
                  "LINE_COMMENT", "BLOCK_COMMENT", "INT", "BOOL", "FLOAT", 
                  "STRING", "ID", "WS" ]

    grammarFileName = "Kafe_Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


