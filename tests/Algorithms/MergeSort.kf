drip mergeSort(lst: List[INT]) => List[INT]:
    List[INT] sortedList = [];
    List[INT] aux = [];
    INT i;
    INT j;
    INT left;
    INT mid;
    INT right;
    INT l;
    INT r;
    INT m;
    INT width;
    INT n_len;

    
    i = 0;
    while (i < len(lst)):
        append(sortedList, lst[i]);
        append(aux, lst[i]);
        i = i + 1;
    ;

    width = 1;
    n_len = len(sortedList);

    while (width < n_len):
        i = 0;

        while (i < n_len):
            left = i;
            mid = left + width;
            right = left + 2 * width;

            if (mid > n_len):
                mid = n_len;
            ;

            if (right > n_len):
                right = n_len;
            ;

            
            l = left;
            r = mid;
            m = left;

            while (l < mid and r < right):
                if (sortedList[l] <= sortedList[r]):
                    aux[m] = sortedList[l];
                    l = l + 1;
                else:
                    aux[m] = sortedList[r];
                    r = r + 1;
                ;
                m = m + 1;
            ;

            while (l < mid):
                aux[m] = sortedList[l];
                l = l + 1;
                m = m + 1;
            ;

            while (r < right):
                aux[m] = sortedList[r];
                r = r + 1;
                m = m + 1;
            ;

            i = i + 2 * width;
        ;

     
        j = 0;
        while (j < n_len):
            sortedList[j] = aux[j];
            j = j + 1;
        ;

        width = width * 2;
    ;

    return sortedList;
;

List[INT] unsorted = [3, 400, 32432, 46, 223, 9];
List[INT] sorted = mergeSort(unsorted);
show("Lista ordenada con Merge Sort:");
show(sorted);
