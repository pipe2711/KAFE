-- clustering_four.kf
import geshaDeep;

show("‚ú® Comienza clustering_four.kf ‚ú®");

-- 1) Dataset con 4 cl√∫steres en 2-D (normalizado 0-1)
List[List[FLOAT]] x_train = [
    -- cl√∫ster A (superior-izq)
    [0.12, 0.88], [0.10, 0.90], [0.14, 0.86],
    -- cl√∫ster B (superior-der)
    [0.82, 0.84], [0.80, 0.88], [0.86, 0.82],
    -- cl√∫ster C (inferior-izq)
    [0.16, 0.14], [0.10, 0.12], [0.14, 0.18],
    -- cl√∫ster D (inferior-der)
    [0.84, 0.18], [0.88, 0.12], [0.82, 0.14]
];
List[List[FLOAT]] y_train = [];     -- no se usa en clustering

List[List[FLOAT]] x_test = [
    [0.11, 0.89], [0.83, 0.86], [0.12, 0.16], [0.86, 0.16]
];
List[List[FLOAT]] y_test = [];      -- para mostrar la advertencia en evaluate()

-- 2) Crear modelo de clustering
GESHA model = geshaDeep.clustering();

-- 3) Capas ocultas
GESHA hidden1 = geshaDeep.create_dense(8,  "relu",  [2], 0.0, 42);
model.add(hidden1);
GESHA hidden2 = geshaDeep.create_dense(6,  "relu",  [],  0.0, 42);
model.add(hidden2);

-- 4) Compilar (sin warning de ‚Äú<2 capas‚Äù porque ya hay 2)
geshaDeep.compile(model, "adam", "mse", []);

-- 5) Salida Softmax con 4 neuronas (4 cl√∫steres)
GESHA output = geshaDeep.create_dense(4,  "softmax", [], 0.0,42);
model.add(output);

-- 6) Entrenar
show("‚åõ Entrenando 80 epochs, batch_size=4 ‚Ä¶");
model.fit(x_train, y_train, 80, 4);
show("‚úÖ Entrenamiento completado.");

-- 7) Resumen de arquitectura
model.summary();

-- 8) Predicciones de prueba
show("üîç Predicciones para x_test:");
for (p in x_test):
    List[FLOAT] probs = model.predict(p);
    show(str(p) + " ‚Üí " + str(probs));
;

-- 9) Llamar evaluate() s√≥lo para mostrar la advertencia
model.evaluate(x_test, y_test);

show("üèÅ Fin de clustering_four.kf");
