-- clustering_test.kf
import geshaDeep;

show("‚ú® Comienza clustering_test.kf ‚ú®");

-- 1) Dataset de ejemplo
List[List[FLOAT]] x_train_norm = [
    [1.0/10, 1.0/10],
    [1.2/10, 0.8/10],
    [0.8/10, 1.1/10],
    [5.0/10, 5.0/10],
    [5.1/10, 4.8/10],
    [4.9/10, 5.2/10],
    [9.0/10, 1.0/10],
    [9.2/10, 1.1/10],
    [8.8/10, 0.9/10]
];
List[List[FLOAT]] y_train = [];

List[List[FLOAT]] x_test_norm = [
    [1.1/10, 0.9/10],
    [5.2/10, 5.1/10],
    [8.9/10, 1.2/10],
    [0.9/10, 1.2/10],
    [4.8/10, 5.0/10],
    [9.1/10, 0.8/10]
];
List[List[FLOAT]] y_test = [];

-- 2) Importar la librer√≠a (ahora deber√≠a funcionar)


-- 3) Crear modelo de clustering y capas
GESHA model = geshaDeep.clustering();
GESHA l1 = geshaDeep.create_dense(16, "relu", [2], 0.0,42);
model.add(l1);
GESHA l2 = geshaDeep.create_dense(12, "relu", [], 0.0, 42);
model.add(l2);

-- 4) Compilar (no habr√° advertencia de <2 capas porque ya agregaste 2)
geshaDeep.compile(model, "adam", "mse", []);

-- 5) Ajustar lr
geshaDeep.set_lr(model, 0.03);

-- 6) Capa de salida Softmax(3)
GESHA out = geshaDeep.create_dense(3, "softmax", [], 0.0, 42);
model.add(out);

-- 7) Entrenar
show("‚åõ Entrenando 100 epochs, batch_size=6 ‚Ä¶");
model.fit(x_train_norm, y_train, 100, 6);
show("‚úÖ Entrenamiento completado.");

-- 8) Mostrar arquitectura
model.summary();

-- 9) Ver predicciones de prueba
show("üîç Predicciones para x_test_norm:");
for (p in x_test_norm):
    List[FLOAT] probs = model.predict(p);
    show(str(p) + " ‚Üí " + str(probs));
;

-- 10) (Opcional) Llamar evaluate s√≥lo para mostrar la advertencia si existiera
model.evaluate(x_test_norm, y_test);

show("üèÅ Fin de clustering_test.kf");
